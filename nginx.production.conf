# Production Nginx Configuration for Semantest API
# Load balancing with blue/green deployment support

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:;" always;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=image_limit:10m rate=2r/s;

    # Connection limits
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream configurations for blue/green deployment
    upstream api_backend {
        least_conn;
        
        # Blue deployment
        server api-blue:3000 weight=100 max_fails=3 fail_timeout=30s;
        
        # Green deployment (weight=0 for inactive)
        server api-green:3001 weight=0 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # WebSocket upstream
    upstream websocket_backend {
        least_conn;
        server websocket:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # SSL configuration (uncomment when certificates are available)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    # HTTP server - redirect to HTTPS in production
    server {
        listen 80;
        server_name api.semantest.com;

        # Health check endpoint for load balancer
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect to HTTPS (uncomment in production)
        # location / {
        #     return 301 https://$server_name$request_uri;
        # }

        # Temporary HTTP configuration (remove in production)
        location / {
            proxy_pass http://api_backend;
            include /etc/nginx/proxy_params.conf;
        }
    }

    # HTTPS server (uncomment when certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name api.semantest.com;

    #     ssl_certificate /etc/nginx/ssl/semantest.crt;
    #     ssl_certificate_key /etc/nginx/ssl/semantest.key;

    #     # API endpoints
    #     location /api/ {
    #         limit_req zone=api_limit burst=20 nodelay;
    #         limit_conn conn_limit 10;
            
    #         proxy_pass http://api_backend;
    #         include /etc/nginx/proxy_params.conf;
    #     }

    #     # Authentication endpoints with stricter rate limiting
    #     location /api/v1/auth/ {
    #         limit_req zone=auth_limit burst=10 nodelay;
    #         limit_conn conn_limit 5;
            
    #         proxy_pass http://api_backend;
    #         include /etc/nginx/proxy_params.conf;
    #     }

    #     # Image generation endpoints with strict rate limiting
    #     location /api/v1/images/ {
    #         limit_req zone=image_limit burst=5 nodelay;
    #         limit_conn conn_limit 3;
            
    #         proxy_pass http://api_backend;
    #         include /etc/nginx/proxy_params.conf;
    #     }

    #     # WebSocket endpoint
    #     location /socket.io/ {
    #         proxy_pass http://websocket_backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_read_timeout 86400;
    #     }

    #     # Health check endpoint
    #     location /health {
    #         proxy_pass http://api_backend/api/v1/health;
    #         access_log off;
    #     }

    #     # Monitoring endpoints (restrict access)
    #     location /metrics {
    #         allow 10.0.0.0/8;
    #         deny all;
    #         proxy_pass http://api_backend/metrics;
    #     }

    #     # Static assets with caching
    #     location /static/ {
    #         expires 30d;
    #         add_header Cache-Control "public, immutable";
    #         root /var/www;
    #     }
    # }
}