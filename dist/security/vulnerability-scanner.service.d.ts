/**
 * Enterprise Vulnerability Scanner Service
 * Automated vulnerability scanning and security reporting
 */
import { EventEmitter } from 'events';
export interface Vulnerability {
    id: string;
    title: string;
    description: string;
    severity: 'info' | 'low' | 'medium' | 'high' | 'critical';
    cvss: number;
    cve?: string;
    cwe?: string;
    category: 'authentication' | 'authorization' | 'injection' | 'xss' | 'csrf' | 'crypto' | 'config' | 'dependency' | 'logic' | 'info_disclosure';
    status: 'open' | 'confirmed' | 'false_positive' | 'fixed' | 'accepted_risk';
    discoveredAt: Date;
    lastSeen: Date;
    fixedAt?: Date;
    source: 'sast' | 'dast' | 'iast' | 'dependency' | 'infrastructure' | 'manual';
    location: {
        type: 'code' | 'dependency' | 'infrastructure' | 'configuration';
        path: string;
        line?: number;
        function?: string;
        component?: string;
    };
    impact: {
        confidentiality: 'none' | 'low' | 'high';
        integrity: 'none' | 'low' | 'high';
        availability: 'none' | 'low' | 'high';
    };
    exploitability: {
        attackVector: 'network' | 'adjacent' | 'local' | 'physical';
        attackComplexity: 'low' | 'high';
        privilegesRequired: 'none' | 'low' | 'high';
        userInteraction: 'none' | 'required';
    };
    remediation: {
        effort: 'low' | 'medium' | 'high';
        priority: number;
        recommendation: string;
        references: string[];
    };
    evidence: {
        payload?: string;
        response?: string;
        screenshot?: string;
        logs?: string[];
    };
    metadata: Record<string, any>;
}
export interface ScanConfiguration {
    id: string;
    name: string;
    description: string;
    type: 'full' | 'quick' | 'focused';
    enabled: boolean;
    schedule: string;
    targets: ScanTarget[];
    scanners: ScannerConfig[];
    notifications: NotificationConfig[];
    reportingOptions: ReportingOptions;
    createdAt: Date;
    updatedAt: Date;
}
export interface ScanTarget {
    id: string;
    type: 'web_application' | 'api' | 'infrastructure' | 'code_repository' | 'dependency';
    name: string;
    url?: string;
    path?: string;
    credentials?: {
        type: 'basic' | 'bearer' | 'api_key' | 'oauth';
        username?: string;
        password?: string;
        token?: string;
    };
    excludePatterns?: string[];
    includePatterns?: string[];
    metadata: Record<string, any>;
}
export interface ScannerConfig {
    type: 'sast' | 'dast' | 'dependency' | 'infrastructure' | 'secrets';
    enabled: boolean;
    configuration: Record<string, any>;
    timeout: number;
    retryCount: number;
}
export interface NotificationConfig {
    enabled: boolean;
    channels: ('email' | 'slack' | 'webhook')[];
    severity: Vulnerability['severity'][];
    recipients: string[];
    webhookUrl?: string;
}
export interface ReportingOptions {
    generateReport: boolean;
    formats: ('json' | 'xml' | 'pdf' | 'html')[];
    includeDetails: boolean;
    includeFalsePositives: boolean;
    customTemplate?: string;
}
export interface ScanResult {
    id: string;
    configurationId: string;
    type: ScanConfiguration['type'];
    status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';
    startedAt: Date;
    completedAt?: Date;
    duration?: number;
    progress: number;
    targetsCanned: number;
    vulnerabilities: Vulnerability[];
    summary: {
        total: number;
        critical: number;
        high: number;
        medium: number;
        low: number;
        info: number;
        fixed: number;
        falsePositives: number;
    };
    errors: string[];
    warnings: string[];
    metadata: Record<string, any>;
}
export interface SecurityReport {
    id: string;
    title: string;
    description: string;
    type: 'vulnerability' | 'compliance' | 'security_posture' | 'trend_analysis';
    generatedAt: Date;
    period: {
        start: Date;
        end: Date;
    };
    summary: {
        totalVulnerabilities: number;
        newVulnerabilities: number;
        fixedVulnerabilities: number;
        riskScore: number;
        complianceScore: number;
        trendDirection: 'improving' | 'stable' | 'deteriorating';
    };
    findings: Vulnerability[];
    recommendations: string[];
    attachments: string[];
    metadata: Record<string, any>;
}
export declare class VulnerabilityScanner extends EventEmitter {
    private vulnerabilities;
    private scanConfigurations;
    private scanResults;
    private reports;
    private isInitialized;
    private scanQueue;
    private activeScanners;
    private maxConcurrentScans;
    private scanSchedules;
    constructor();
    initialize(): Promise<void>;
    /**
     * Start vulnerability scan
     */
    startScan(configurationId: string, triggeredBy?: string): Promise<ScanResult>;
    /**
     * Execute scan
     */
    private executeScan;
    /**
     * Scan individual target
     */
    private scanTarget;
    /**
     * Run individual scanner
     */
    private runScanner;
    /**
     * Static Application Security Testing (SAST)
     */
    private runSASTScan;
    /**
     * Dynamic Application Security Testing (DAST)
     */
    private runDASTScan;
    /**
     * Dependency vulnerability scanning
     */
    private runDependencyScan;
    /**
     * Infrastructure vulnerability scanning
     */
    private runInfrastructureScan;
    /**
     * Secrets scanning
     */
    private runSecretsScan;
    /**
     * Process and deduplicate vulnerabilities
     */
    private processVulnerabilities;
    /**
     * Calculate vulnerability summary
     */
    private calculateSummary;
    /**
     * Get vulnerability by ID
     */
    getVulnerability(vulnId: string): Vulnerability | null;
    /**
     * List vulnerabilities with filters
     */
    listVulnerabilities(filters: {
        severity?: Vulnerability['severity'];
        status?: Vulnerability['status'];
        category?: Vulnerability['category'];
        source?: Vulnerability['source'];
        startDate?: Date;
        endDate?: Date;
        limit?: number;
        offset?: number;
    }): Vulnerability[];
    /**
     * Update vulnerability status
     */
    updateVulnerability(vulnId: string, updates: Partial<Vulnerability>, updatedBy: string): Promise<Vulnerability>;
    /**
     * Get scan result
     */
    getScanResult(scanId: string): ScanResult | null;
    /**
     * List scan results
     */
    listScanResults(filters: {
        configurationId?: string;
        status?: ScanResult['status'];
        startDate?: Date;
        endDate?: Date;
        limit?: number;
        offset?: number;
    }): ScanResult[];
    /**
     * Generate security report
     */
    generateSecurityReport(type: SecurityReport['type'], period: {
        start: Date;
        end: Date;
    }, options?: {
        includeDetails?: boolean;
        includeTrends?: boolean;
        format?: 'json' | 'pdf' | 'html';
    }): Promise<SecurityReport>;
    private setupDefaultConfigurations;
    private startScanProcessor;
    private processScanQueue;
    private scheduleScans;
    private sendNotifications;
    private sendNotificationToChannel;
    private generateScanReport;
    private generateReportInFormat;
    private calculateRiskScore;
    private generateRecommendations;
    private updateScanResult;
    private generateScanId;
    private generateVulnId;
    private generateReportId;
    /**
     * Shutdown service
     */
    shutdown(): Promise<void>;
}
export declare const vulnerabilityScanner: VulnerabilityScanner;
//# sourceMappingURL=vulnerability-scanner.service.d.ts.map