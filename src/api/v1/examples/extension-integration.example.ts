/**
 * @fileoverview Browser Extension Integration Example
 * @description Example code showing how extensions should integrate with the API
 * @author Alex - Semantest Team
 * @version 1.0.0
 */

import { io, Socket } from 'socket.io-client';
import { 
  NewChatRequest, 
  JobResponse,
  JobStatusResponse,
  WSEventType,
  WSEvent,
  NewChatRequestedEvent,
  ImageJobCompletedEvent
} from '../schemas';

/**
 * Example browser extension client
 */
class SemantestExtensionClient {
  private apiUrl = 'https://api.semantest.com/v1';
  private wsUrl = 'wss://api.semantest.com';
  private socket: Socket | null = null;
  private authToken: string;

  constructor(authToken: string) {
    this.authToken = authToken;
  }

  /**
   * Initialize WebSocket connection for real-time events
   */
  async connectWebSocket(): Promise<void> {
    this.socket = io(this.wsUrl, {
      auth: {
        token: this.authToken
      },
      transports: ['websocket'],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });

    // Handle connection events
    this.socket.on('connect', () => {
      console.log('Connected to Semantest WebSocket');
    });

    this.socket.on('event', (event: WSEvent) => {
      this.handleWebSocketEvent(event);
    });

    this.socket.on('error', (error) => {
      console.error('WebSocket error:', error);
    });
  }

  /**
   * Create new chat with image generation
   */
  async createChatWithImage(prompt: string): Promise<{
    chatResponse: string;
    imageJobId?: string;
  }> {
    const request: NewChatRequest = {
      userId: 'current-user-id', // Get from extension auth
      prompt,
      imageGeneration: {
        enabled: true,
        provider: 'automatic',
        size: '1024x1024',
        quality: 'standard',
        count: 1
      }
    };

    const response = await fetch(`${this.apiUrl}/chat/new`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.authToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(request)
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }

    const data = await response.json();
    
    return {
      chatResponse: data.chatResponse.content,
      imageJobId: data.imageGenerationJob?.jobId
    };
  }

  /**
   * Poll for image generation status
   */
  async pollImageStatus(jobId: string): Promise<JobStatusResponse> {
    const response = await fetch(`${this.apiUrl}/images/status/${jobId}`, {
      headers: {
        'Authorization': `Bearer ${this.authToken}`
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to get job status: ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Handle WebSocket events
   */
  private handleWebSocketEvent(event: WSEvent): void {
    switch (event.type) {
      case WSEventType.NEW_CHAT_REQUESTED:
        const chatEvent = event as NewChatRequestedEvent;
        console.log('New chat requested:', chatEvent.data);
        // Update extension UI
        break;

      case WSEventType.IMAGE_JOB_COMPLETED:
        const imageEvent = event as ImageJobCompletedEvent;
        console.log('Image generated:', imageEvent.data.result);
        // Display images in extension
        this.displayGeneratedImages(imageEvent.data.result.images);
        break;

      case WSEventType.QUOTA_UPDATED:
        console.log('Quota updated:', event);
        // Update quota display
        break;
    }
  }

  /**
   * Display generated images in extension UI
   */
  private displayGeneratedImages(images: any[]): void {
    images.forEach(image => {
      // Create image element and inject into page
      const img = document.createElement('img');
      img.src = image.url;
      img.alt = 'Generated by Semantest';
      img.style.maxWidth = '100%';
      
      // Add to extension UI or inject into page
      document.querySelector('#semantest-images')?.appendChild(img);
    });
  }

  /**
   * Check user capabilities and restrictions
   */
  async checkCapabilities(userId: string): Promise<{
    canGenerate: boolean;
    remainingQuota: number;
    nextAllowedAt?: Date;
  }> {
    const response = await fetch(`${this.apiUrl}/images/status/${userId}`, {
      headers: {
        'Authorization': `Bearer ${this.authToken}`
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to check capabilities: ${response.statusText}`);
    }

    const data = await response.json();
    
    return {
      canGenerate: data.data.enabled && data.data.remainingQuota > 0,
      remainingQuota: data.data.remainingQuota,
      nextAllowedAt: data.data.nextAllowedAt ? new Date(data.data.nextAllowedAt) : undefined
    };
  }
}

// ===== Usage Example =====

async function extensionExample() {
  // Initialize client with auth token
  const client = new SemantestExtensionClient('user-auth-token');
  
  // Connect WebSocket for real-time updates
  await client.connectWebSocket();
  
  // Check if user can generate images
  const capabilities = await client.checkCapabilities('user-123');
  
  if (!capabilities.canGenerate) {
    console.log(`Generation disabled. Next allowed at: ${capabilities.nextAllowedAt}`);
    return;
  }
  
  try {
    // Create chat with image generation
    const { chatResponse, imageJobId } = await client.createChatWithImage(
      'A beautiful sunset over mountains'
    );
    
    console.log('Chat response:', chatResponse);
    
    if (imageJobId) {
      console.log('Image generation started:', imageJobId);
      
      // Option 1: Poll for status
      let status;
      do {
        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds
        status = await client.pollImageStatus(imageJobId);
        console.log('Status:', status.status, 'Progress:', status.progress);
      } while (status.status !== 'completed' && status.status !== 'failed');
      
      // Option 2: WebSocket will automatically notify when complete
      // via handleWebSocketEvent
    }
    
  } catch (error) {
    console.error('Error:', error);
  }
}

// ===== Content Script Integration =====

/**
 * Example content script integration for ChatGPT
 */
class ChatGPTIntegration {
  private client: SemantestExtensionClient;

  constructor() {
    // Get auth token from extension storage
    chrome.storage.sync.get(['authToken'], (result) => {
      if (result.authToken) {
        this.client = new SemantestExtensionClient(result.authToken);
        this.initialize();
      }
    });
  }

  async initialize() {
    // Connect WebSocket
    await this.client.connectWebSocket();
    
    // Listen for chat messages
    this.interceptChatMessages();
    
    // Add image generation button to UI
    this.addImageGenerationButton();
  }

  interceptChatMessages() {
    // Monitor for new chat messages
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        // Check if new message was added
        const newMessage = this.extractNewMessage(mutation);
        if (newMessage && this.shouldGenerateImage(newMessage)) {
          this.generateImageForMessage(newMessage);
        }
      });
    });

    // Start observing chat container
    const chatContainer = document.querySelector('#chat-messages');
    if (chatContainer) {
      observer.observe(chatContainer, { childList: true, subtree: true });
    }
  }

  private extractNewMessage(mutation: MutationRecord): string | null {
    // Extract message text from DOM mutation
    // Implementation depends on specific chat UI structure
    return null;
  }

  private shouldGenerateImage(message: string): boolean {
    // Check if message requests image generation
    const imageKeywords = ['generate image', 'create picture', 'draw', 'illustrate'];
    return imageKeywords.some(keyword => message.toLowerCase().includes(keyword));
  }

  private async generateImageForMessage(message: string) {
    try {
      const { imageJobId } = await this.client.createChatWithImage(message);
      console.log('Generating image for message:', message, 'Job ID:', imageJobId);
    } catch (error) {
      console.error('Failed to generate image:', error);
    }
  }

  private addImageGenerationButton() {
    // Add button to chat UI
    const button = document.createElement('button');
    button.textContent = 'ðŸŽ¨ Generate Image';
    button.className = 'semantest-generate-btn';
    button.onclick = () => this.handleGenerateClick();
    
    // Insert into appropriate location in chat UI
    document.querySelector('#chat-input-container')?.appendChild(button);
  }

  private async handleGenerateClick() {
    // Get current message input
    const input = document.querySelector('#chat-input') as HTMLTextAreaElement;
    if (input?.value) {
      await this.generateImageForMessage(input.value);
    }
  }
}

// Initialize when content script loads
if (typeof window !== 'undefined') {
  new ChatGPTIntegration();
}

export { SemantestExtensionClient, ChatGPTIntegration };